;Default tracking configuration for all sources (source: *),
;used only if no other stanza matches.
{
	source: *
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: HQDC
	source.factory.RootFQN: RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?#GEOADDR=?

	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

; Configuration for TrackingLogger
{
	source: com.jkoolcloud.tnt4j.TrackingLogger
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

;Stanza used for Stream-JMX sources
{
	source: com.jkoolcloud.tnt4j.stream.jmx
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: HQDC00
	source.factory.RootFQN: SERVER=?#DATACENTER=?
	source.factory.RootSSN: tnt4j-stream-jmx

	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory

	; Event Sink configuration for streaming name=value pairs over socket
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.SocketEventSinkFactory
	event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
	event.sink.factory.EventSinkFactory.eventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.NullEventSinkFactory
	event.sink.factory.EventSinkFactory.Host: $com.jkoolcloud.tnt4j.stream.jmx.tnt4j.out.host
	event.sink.factory.EventSinkFactory.Port: $com.jkoolcloud.tnt4j.stream.jmx.tnt4j.out.port
	; NOTE: DO NOT define "event.formatter" property value if have no need for custom formatter.
	;       SamplerFactory will take care to set appropriate one for a context.
	;event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter
	; If JMX attributes should be formatted as JMX object names
	;event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.FactNameValueFormatter
	; If JMX attributes should be formatted as JMX object paths
	;event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.FactPathValueFormatter
	; If JMX attributes should be formatted as JMX object paths for WAS
	;event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.WASFactPathValueFormatter
	; If formatter should serialize only simple types JMX attribute values. Rest are replaced by dummy value.
	event.formatter.SerializeSimplesOnly: false
	; Mapping of attribute key string symbol replacements
	event.formatter.KeyReplacements: " "->"_" "\""->"'"
	; Mapping of attribute value string symbol replacements
	event.formatter.ValueReplacements: "\r"->"\\r" "\n"->"\\n" ";"->"&" ","->"&" "["->"{(" "]"->")}" "\""->"'"

	; Configure default sink filter based on level and time (elapsed/wait)
	event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	event.sink.factory.Filter.Level: TRACE
	; Uncomment lines below to filter out events based on elapsed time and wait time
	; Timed event/activities greater or equal to given values will be logged
	;event.sink.factory.Filter.ElapsedUsec: 100
	;event.sink.factory.Filter.WaitUsec: 100

	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}
