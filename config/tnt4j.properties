;Default tracking configuration for all sources (source: *),
;used only if no other stanza matches.
{
	source: *
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: HQDC
	source.factory.RootFQN: RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?#GEOADDR=?

	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

; Configuration for TrackingLogger
{
	source: com.jkoolcloud.tnt4j.TrackingLogger
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

;Stanza used for Stream-JMX sources
{
	source: com.jkoolcloud.tnt4j.stream.jmx
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: HQDC
	source.factory.RootFQN: SERVER=?#DATACENTER=?
	source.factory.RootSSN: tnt4j-stream-jmx

	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl

	; Event sink definition for streaming to a file
	event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.sink.factory.EventSinkFactory.FileName: logs/tnt4j-stream-jmx_samples.log
	; NOTE: DO NOT define "event.formatter" property value if have no need for custom formatter.
	;       SamplerFactory will take care to set appropriate one for a context.
	; If JMX attributes should be formatted as JMX object names
	#event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.FactNameValueFormatter
	; If JMX attributes should be formatted as JMX object paths
	event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.FactPathValueFormatter
	; If JMX attributes should be formatted as JMX object paths for IBM WAS and Liberty
	#event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.SLIFactPathValueFormatter
	; If formatter should serialize only simple types JMX attribute values. Rest are replaced by dummy value.
	event.formatter.SerializeSimplesOnly: true
	; Mapping of attribute key string symbol replacements
	event.formatter.KeyReplacements: " "->"_" "\""->"'" "/"->"%"
	; Mapping of attribute value string symbol replacements
	event.formatter.ValueReplacements: "\r"->"\\r" "\n"->"\\n" ";"->"|" ","->"|" "["->"{(" "]"->")}" "\""->"'"
	; Definitions ObjectName attributes sets used when building path: ';' is level set delimiter and ',' is set attribute names delimiter
	#event.formatter.PathLevelAttributes: domain; type; name, brokerName; service, connector, destinationType; instanceName, connectorName, destinationName
	; Defines JMX sample attribute key suffix to be added when duplicate keys for "branch" and "leaf" nodes are found.
	; NOTE: AP does not allow to have same name for "branch" and "leaf" nodes at same tree level
	#event.formatter.DuplicateKeySuffix: ___

	; Event Sink configuration for streaming to jKoolCloud
	; NOTE: Requires JESL libraries (http://nastel.github.io/JESL/)
	#event.sink.factory.EventSinkFactory: com.jkoolcloud.jesl.tnt4j.sink.JKCloudEventSinkFactory
	#event.sink.factory.EventSinkFactory.Filename: logs/tnt4j-stream-jmx_samples.json
	#event.sink.factory.EventSinkFactory.Url: https://data.jkoolcloud.com
	#event.sink.factory.EventSinkFactory.Token: YOUR-ACCESS-TOKEN
	#event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter
	; Configures special numeric values handling. Can be one of: SUPPRESS, ENQUOTE, MAINTAIN. Default value: SUPPRESS
	#event.formatter.SpecNumbersHandling: MAINTAIN

	; Event Sink configuration for streaming name=value pairs over socket
	#event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.SocketEventSinkFactory
	; If socket sent data should no be logged anywhere else
	##event.sink.factory.EventSinkFactory.eventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.NullEventSinkFactory
	; If socket sent data should be logged to file
	##event.sink.factory.EventSinkFactory.eventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	##event.sink.factory.EventSinkFactory.eventSinkFactory.FileName: logs/tnt4j-stream-jmx_samples_socket.log
	#event.sink.factory.EventSinkFactory.Host: localhost
	#event.sink.factory.EventSinkFactory.Port: 6060
	; NOTE: DO NOT define "event.formatter" property value if have no need for custom formatter.
	;       SamplerFactory will take care to set appropriate one for a context.
	#event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter
	; If JMX attributes should be formatted as JMX object names
	#event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.FactNameValueFormatter
	; If JMX attributes should be formatted as JMX object paths
	#event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.FactPathValueFormatter
	; If JMX attributes should be formatted as JMX object paths for IBM WAS and Liberty
	#event.formatter: com.jkoolcloud.tnt4j.stream.jmx.format.SLIFactPathValueFormatter
	; If formatter should serialize only simple types JMX attribute values. Rest are replaced by dummy value.
	#event.formatter.SerializeSimplesOnly: false
	; Mapping of attribute key string symbol replacements
	#event.formatter.KeyReplacements: " "->"_" "\""->"'" "/"->"%"
	; Mapping of attribute value string symbol replacements
	#event.formatter.ValueReplacements: "\r"->"\\r" "\n"->"\\n" ";"->"|" ","->"|" "["->"{(" "]"->")}" "\""->"'"
	; Definitions ObjectName attributes sets used when building path: ';' is level set delimiter and ',' is set attribute names delimiter
	#event.formatter.PathLevelAttributes: domain; type; name, brokerName; service, connector, destinationType; instanceName, connectorName, destinationName
	; Defines JMX sample attribute key suffix to be added when duplicate keys for "branch" and "leaf" nodes are found.
	; NOTE: AP does not allow to have same name for "branch" and "leaf" nodes at same tree level
	#event.formatter.DuplicateKeySuffix: ___
	; If JMX attributes should be formatted as JSON (metrics payload without much of TNT4J metadata)
	#event.formatter: com.jkoolcloud.tnt4j.format.LevelingJSONFormatter
	#event.formatter.Level: 0
	#event.formatter.KeyReplacements: "\\"->"_"

	; Configure default sink filter based on level and time (elapsed/wait)
	event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	event.sink.factory.Filter.Level: TRACE
	; Uncomment lines below to filter out events based on elapsed time and wait time
	; Timed event/activities greater or equal to given values will be logged
	#event.sink.factory.Filter.ElapsedUsec: 100
	#event.sink.factory.Filter.WaitUsec: 100

	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}
