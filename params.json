{"name":"PingJMX","tagline":"Framework to monitor JMX or any other metrics and write to TNT4J event sink: file, socket","body":"# PingJMX\r\nFramework to monitor JMX or any other metrics and write to TNT4J event sink: file, socket, other TNT4J event sinks.\r\n\r\n# Using PingJMX\r\nIt is simple, just imbed the following code into your application:\r\n```java\r\n// obtain PingFactory instance\r\nPingFactory factory = DefaultPingFactory.getInstance();\r\n// create an instance of the pinger that will sample mbeans\r\nPlatformJmxPing platformJmx = factory.newInstance();\r\n//schedule jmx collection (ping) for given jmx filter and 30000 ms sampling period\r\nplatformJmx.scheduleJmxPing(PingJMX.JMX_FILTER_ALL, 30000);\r\n```\r\nTo schedule jmx collection for a specific mbean server:\r\n```java\r\nMBeanServer mserver = ManagementFactory.getPlatformMBeanServer();\r\n// obtain PingFactory instance\r\nPingFactory factory = DefaultPingFactory.getInstance();\r\n// create an instance of the pinger that will sample mbeans for a given MBeanServer\r\nPlatformJmxPing platformJmx = factory.newInstance(mserver);\r\n//schedule jmx collection (ping) for given jmx filter and 30000 ms sampling period\r\nplatformJmx.scheduleJmxPing(PingJMX.JMX_FILTER_ALL, 30000);\r\n```\r\nBelow is an example of creating jmx collection for all registered mbean servers:\r\n```java\r\n// obtain PingFactory instance\r\nPingFactory factory = DefaultPingFactory.getInstance();\r\n// find other registered mbean servers\r\nArrayList<MBeanServer> mlist = MBeanServerFactory.findMBeanServer(null);\r\nfor (MBeanServer server: mlist) {\r\n\tPlatformJmxPing jmxp = factory.newInstance(server);\r\n\tjmxp.scheduleJmxPing(PingJMX.JMX_FILTER_ALL, 30000);\r\n}\r\n```\r\nAll `PingJMX` output is written to underlying tnt4j event sink configured in `tnt4j.properties` file. Sink destinations could be a file, socket, log4j, user defined event sink implementations.\r\n\r\n## Running PingJMX as standalone app\r\n```\r\njava -Dlog4j.configuration=file:log4j.properties -classpath \"tnt4j-ping-jmx.jar;lib/tnt4j-api-final-all.jar\" org.tnt4j.pingjmx.PingAgent \"*:*\" 10000 \r\n```\r\n\r\n## Running PingJMX as -javaagent\r\nPingJMX can be invoked as a a javaagent using `-javaagent` command line:\r\n```java\r\njava -javaagent:tnt4j-ping-jmx.jar=\"*:*!30000\" -Dlog4j.configuration=file:log4j.properties -Dtnt4j.config=tnt4j.properties -classpath \"tnt4j-ping-jmx.jar;lib/tnt4j-api-final-all.jar\" your.class.name your-args\r\n```\r\nThe options are `-javaagent:tnt4j-ping-jmx.jar=\"mbean-filter!sample-time-ms\"`, classpath must include pingjmx jar files as well as locations of log4j and tnt4j configuration files.\r\n\r\n## Overriding default `PingFactory`\r\nUser may want to override default `PingFactory` with their own by specifying `-Dorg.tnt4j.ping.factory=org.tnt4j.pingjmx.PlatformPingFactory`. `PingFactory` is used to generate instances of the underlying pinger implementatons (objects that provide sampling of underlying mbeans).\r\n```java\r\n// return default or user defined PingFactory implementation\r\nPingFactory factory = DefaultPingFactory.getInstance();\r\n...\r\n```\r\n# Project Dependencies\r\nPingJMX requires the following:\r\n* TNT4J (https://github.com/Nastel/TNT4J)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}