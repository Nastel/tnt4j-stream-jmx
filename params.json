{"name":"PingJMX","tagline":"Framework to monitor JMX or any other metrics and write to TNT4J event sink: file, socket","body":"# PingJMX\r\nFramework to monitor JMX or any other metrics and write to TNT4J event sink: file, socket, other TNT4J event sinks.\r\n\r\n# Using PingJMX\r\nIt is simple, just imbed the following code into your application:\r\n```java\r\nPlatformJmxPing platformJmx = newInstance();\r\n//schedule jmx collection (ping) for given jmx filter and 30000 ms sampling period\r\nplatformJmx.scheduleJmxPing(PingJMX.JMX_FILTER_ALL, 30000);\r\n```\r\nTo schedule jmx collection for a specific mbean server:\r\n```java\r\nMBeanServer mserver = ManagementFactory.getPlatformMBeanServer();\r\nPlatformJmxPing platformJmx = newInstance(mserver);\r\n//schedule jmx collection (ping) for given jmx filter and 30000 ms sampling period\r\nplatformJmx.scheduleJmxPing(PingJMX.JMX_FILTER_ALL, 30000);\r\n```\r\nBelow is an example of creating jmx collection for all registered mbean servers:\r\n```java\r\n// find other registered mbean servers\r\nArrayList<MBeanServer> mlist = MBeanServerFactory.findMBeanServer(null);\r\nfor (MBeanServer server: mlist) {\r\n\tPlatformJmxPing jmxp = newInstance(server);\r\n\tjmxp.scheduleJmxPing(PingJMX.JMX_FILTER_ALL, 30000);\r\n}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}